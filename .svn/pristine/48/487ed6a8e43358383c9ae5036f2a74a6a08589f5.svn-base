<%@page import="com.fasterxml.jackson.databind.ObjectMapper"%>
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<%@ taglib prefix="sec" uri="http://www.springframework.org/security/tags"  %>
<%@ taglib prefix="fn" uri="http://java.sun.com/jsp/jstl/functions"%>
<%@ taglib prefix="fmt" uri="http://java.sun.com/jsp/jstl/fmt" %>
<style>
/* 어사이드 강조 */
.aside-trea-assig{
	width: 196px;
	border-radius: 16px 0px 0px 16px;
	background: var(--bg-02, #DBF2F4);
	height: 56px;
	border-right: 4px solid var(--ci-01, #0ABAB5);
	margin-left: 4px;
	color: var(--ci-01, #0ABAB5);
}
/*페이지 전용 시작 */
.doctor-office-wrap {
	width: 660px;
}
.doctor-office{
	height: 365px;	
	width: 300px;
	float: left;
	margin: 4px 2px 4px 2px;
}
.search{
	background-image: url(/resources/images/Search.png);
	background-repeat: no-repeat;
	background-position: 372px center;
	width: 412px;
	height: 48px;
	margin-left: 18px;
}
.btn-state {
	font-size: 10.9px;
    padding: 4px 8px;
    width: 100%;
}
.doctor-info{
	width: 440px;
	height: 362px;
	margin: 4px 4px;
}
.doctor-info-div{
	height: 840px;
	width: 932px;
}
.doctor-info-wrap{
	display: flex;
	flex-wrap: wrap;
	overflow: auto;
}
.circle {
	width: 175px; /* 원의 지름 */
	height: 175px; /* 원의 지름 */
	border-radius: 50%; /* 테두리를 원형으로 만듦 */
	border: 1px solid var(--border, #E0E8E6);
	overflow: hidden;
}
.circle img {
    width: 100%;
    height: 100%;
    object-fit: cover;
}
.text-align-right{
	text-align: right;
}
.dduk-row{
	height: 180px;
	gap: 8px;
}
.dduk-row-left{
	display: flex;
    justify-content: space-between;
    flex-direction: column;
}
.dduk-row-right{
	display: flex;
    justify-content: space-between;
    flex-direction: column;
}
.dduk-row-right-input{
    width: 150px;
    margin: 0px 0px 4px 0px
}
.dduk-bottom{
	margin-top: 10px;
	display: flex;
}
.inner-div{
	font-size: 1.2em;
	text-align: center;
	margin-bottom: 25px;
}
p{
	margin: 0rem;
}
.schedule-div{
    width: 125px;
    height: 110px;
    display: flex;
    margin: 20px 4px;
    flex-direction: column;
    align-items: center;
}
.schedule-div-aside{
	width: 75px;
	margin: 20px 4px;
}
.notice-text{
	height: 90%;
}
.selected {
    background-color: #EDF8F9;
}
/* 진료실 배정 페이지 전용 끝 */
</style>
<html>
<body>
	<div>
		<div class="dduk-body-border doctor-info-div">
			<div class="dduk-title-area">
			<h2>의사 목록</h2>
			</div>
				<div class="autocomplete"></div>
			<div class="doctor-info-wrap">
			<c:forEach var="doctorVO" items="${doctorVOList}">
				<div class="dduk-inner-border doctor-info">
					<div class="dduk-row">
						<div class="circle">
							<img alt="" src="/resources/upload/empProfile/${doctorVO.atchFileDetailSavenm}">
						</div>
						<div class="dduk-row-left">
							<p class="text-align-right" style="margin-top: 2px;">이름 :</p>
							<p class="text-align-right">부서 : </p>
							<p class="text-align-right">직책 : </p>
							<p class="text-align-right">연락처 : </p>
							<input type="hidden" id="doctor-emp-no" value="${doctorVO.empNo}"/>
						</div> 
						<div class="dduk-row-right">
							<input type="text" class="dduck-input dduk-row-right-input" value="${doctorVO.empName}" disabled><br/>
						<c:if test="${doctorVO.empDeptCd=='DTCD01'}">
						   <input type="text" class="dduck-input dduk-row-right-input" value="의사" disabled><br/>
						</c:if>
						<c:choose>
							<c:when test="${doctorVO.empJbpsCd=='JBCD10'}">
							   <input type="text" class="dduck-input dduk-row-right-input" value="일반의" disabled><br/>
							</c:when>
							<c:when test="${doctorVO.empJbpsCd=='JBCD11'}">
							   <input type="text" class="dduck-input dduk-row-right-input" value="수련의" disabled><br/>
							</c:when>
							<c:when test="${doctorVO.empJbpsCd=='JBCD12'}">
							   <input type="text" class="dduck-input dduk-row-right-input" value="전공의" disabled><br/>
							</c:when>
							<c:when test="${doctorVO.empJbpsCd=='JBCD13'}">
							   <input type="text" class="dduck-input dduk-row-right-input" value="전문의" disabled><br/>
							</c:when>
						</c:choose>
						   <input type="text" class="dduck-input dduk-row-right-input" value="${doctorVO.empPh}" disabled><br/>
						</div>
					</div>
					<div class="dduk-bottom">
						<c:forEach var="docScheduleVO" items="${docScheduleVOList}">
							<c:if test="${docScheduleVO!=null}">
								<c:choose>
									<c:when test="${docScheduleVO.empNo == doctorVO.empNo}">
										<div class="schedule-div-aside">
											<div class="inner-div">일정</div>
											<div class="inner-div">수술중</div>
										</div>
										
										<div class="schedule-div">
											<div class="inner-div">시작일시</div>
											<div class="inner-div">${docScheduleVO.dsStrDate}</div>
										</div>
										
										<div class="schedule-div">
											<div class="inner-div">종료일시</div>
											<div class="inner-div">${docScheduleVO.dsEndDate}</div>
										</div>
										
										<div class="schedule-div">
											<div class="inner-div">진료가능 여부</div>
											<div class="inner-div"><input type="button" class="dduk-btn-danger" value="진료 불가"/></div>
										</div>
									</c:when>
									<c:otherwise>
										<div class="schedule-div-aside">
											<div class="inner-div">일정</div>
											<div class="inner-div">없음</div>
										</div>
										
										<div class="schedule-div">
											<div class="inner-div">시작일시</div>
											<div class="inner-div"></div>
										</div>
										
										<div class="schedule-div">
											<div class="inner-div">종료일시</div>
											<div class="inner-div"></div>
										</div>
										
										<div class="schedule-div">
											<div class="inner-div">진료가능 여부</div>
											<div class="inner-div"><input type="button" class="dduk-btn-info" value="진료 가능"/></div>
										</div>
									</c:otherwise>
								</c:choose>
							</c:if>
						</c:forEach>
					</div>
				</div>
			</c:forEach>
			</div>
		</div>
	</div>
	
	<div class="dduk-body-border doctor-office-wrap"  style="position: relative;">
		<div class="dduk-title-area">
			<h2>진료실 현황</h2>
		</div>
		<c:forEach var="docOfficeVO" items="${docOfficeVOList}" varStatus="stat">
		<div class="dduk-inner-border doctor-office">
			<div>
				<h3>진료실 ${stat.count}</h3>
			</div>
			<c:if test="${docOfficeVO!=null}">
			<div class="notice-text">
				<input type="hidden" id="do-no" value="DO0${stat.count}"/>
				진료중인 의사가 없습니다.
			</div>
			</c:if>
		</div>
		</c:forEach>
	</div>
<script>
// 의사를 클릭하면 강조되는 이벤트
const doctorInfos = document.querySelectorAll('.doctor-info');
var doctorEmpNo = "";

doctorInfos.forEach(info => info.addEventListener('click',function(){
	// 진료 불가능 버튼을 찾아서 존재한다면 선택되지 못하게 하기
	var dangerButton = info.querySelectorAll('.dduk-btn-danger');
	if(dangerButton.length > 0){
		Swal.fire({
            title: '다른 의사를 선택해주세요.',
            icon: 'error',
            showCancelButton: false,
            confirmButtonColor: '#0ABAB5',
            cancelButtonColor: '#8D9EA5',
            confirmButtonText: '확인',
            cancelButtonText: '취소'
        })
        return;
	}
	
	// 다른 div의 selected를 지우기
	doctorInfos.forEach(otherInfo => {
        if (otherInfo !== info) {
            otherInfo.classList.remove('selected');
        }
    });
	// selected 클래스 추가
    info.classList.add('selected');
    doctorEmpNo = info.querySelector('#doctor-emp-no').value;
}));


// 진료실 배정
const doctorOffices = document.querySelectorAll('.doctor-office');

doctorOffices.forEach(office => office.addEventListener('click',function(){
	// 의사를 선택하지 않고 진료실을 클릭하면 막는다
	let selectedExists = false; // selected 클래스가 있는지 여부 확인

	doctorInfos.forEach(info => {
        if (info.classList.contains('selected')) {
            selectedExists = true;
        }
    });

    if (!selectedExists) {
        Swal.fire({
            title: '의사를 선택해주세요.',
            icon: 'error',
            showCancelButton: false,
            confirmButtonColor: '#0ABAB5',
            cancelButtonColor: '#8D9EA5',
            confirmButtonText: '확인',
            cancelButtonText: '취소'
        })
    };
    var doNo = office.querySelector('#do-no').value;
    
    var docOfficeVO = {
    		"doNo" : doNo,
    		"empNo" : doctorEmpNo
    }
    
    if (selectedExists) {
        Swal.fire({
            title: '배정하시겠습니까?',
            icon: 'question',
            showCancelButton: true,
            confirmButtonColor: '#0ABAB5',
            cancelButtonColor: '#8D9EA5',
            confirmButtonText: '확인',
            cancelButtonText: '취소'
        }).then((result) => {
            if (result.isConfirmed) {
                console.log("확인");
                const xhr = new XMLHttpRequest();
                const url = '/hrd/assignDoctorToClinicRoom';
                xhr.open('POST', url);
                xhr.setRequestHeader("${_csrf.headerName}", "${_csrf.token}");
                xhr.setRequestHeader("Content-Type", "application/json;charset=UTF-8");
                xhr.onreadystatechange = function() {
                    if (xhr.readyState === XMLHttpRequest.DONE) {
                        if (xhr.status === 200) {
                            console.log(xhr.responseText);
                            // 요청 성공 시 실행할 코드
                        } else {
                            console.error('요청 실패: ' + xhr.status);
                            // 요청 실패 시 실행할 코드
                        }
                    }
                };
                xhr.send(JSON.stringify(docOfficeVO));
                
            } else if (result.dismiss === Swal.DismissReason.cancel) {
                // 취소 버튼이 눌렸을 때 실행할 코드
            	console.log("취소");
            }
        });
    }
    
}));
</script>
</body>
</html>