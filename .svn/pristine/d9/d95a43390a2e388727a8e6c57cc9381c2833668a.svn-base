package kr.or.dduk.employee.controller;

import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import kr.or.dduk.employee.service.EmployeeService;
import kr.or.dduk.util.FileController;
import kr.or.dduk.vo.EmployeeVO;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@RequestMapping("/emp")
@Controller
public class EmployeeController {

	@Autowired
	FileController fileController;
	
	@Autowired
	EmployeeService employeeService;
	
	/**
	 * 회원가입 화면 이동
	 * @return
	 */
	@GetMapping("/create")
	public String create(Model model) {
		// DB에서 제일 마지막 empNo값 가져오기
		String lastEmpNo = this.employeeService.getNewNo();
		
		// 기존 시퀀스 값에서 문자만 떼기
		String seqSet = lastEmpNo.substring(0, 4);
		
		// 새 시퀀스 값
	    int newNo = Integer.parseInt(lastEmpNo.substring(4)) + 1;
	    String newEmpNo = seqSet + newNo;
	    
	    // 새 시퀀스 값 넣어주기
		model.addAttribute("newEmpNo", newEmpNo);
		log.info("create -> newEmpNo : " + newEmpNo);
		
		return "emp/create";
	}
	
	/**
	 * 회원가입 진행
	 * @param employeeVO
	 * @return
	 */
	@PostMapping("/create")
	public String create(EmployeeVO employeeVO) {
		log.info("create -> employeeVO : " + employeeVO);
		
		// 파일 로컬+DB 저장, 파일코드 얻어오고 설정
		Map<String, Object> map = this.fileController.uploadFile(employeeVO.getUploadFile(), "empProfile");
		int reuslt = (Integer)map.get("result"); // db에 insert 성공한 개수
		String atchFileCd = (String)map.get("atchFileCd"); // 파일코드
		employeeVO.setAtchFileCd(atchFileCd);
		
		// 비밀번호 보안화 인코딩
		String rawPw = employeeVO.getEmpPw();
		BCryptPasswordEncoder encoder = new BCryptPasswordEncoder();
		String encodedPassword = encoder.encode(rawPw);
		employeeVO.setEmpPw(encodedPassword);
		
		//employeeVO를 db에 넣기
		int res = this.employeeService.create(employeeVO);
		log.info("create -> res : " + res);
		
		return "redirect:/emp/detail?empNo="+employeeVO.getEmpNo();
	}
	
	/**
	 * 회원 상세
	 * @param empNo
	 * @param model
	 * @param atchFileCd
	 * @return
	 */
	@GetMapping("/detail")
	public String detail(@RequestParam String empNo, Model model) {

		EmployeeVO employeeVO = this.employeeService.detail(empNo);
		model.addAttribute("employeeVO", employeeVO);
		log.info("detail -> employeeVO : " + employeeVO);
		
		return "emp/detail";
	}
	
	/**
	 * 회원 수정
	 * @param employeeVO
	 * @return
	 */
	@PostMapping("/update")
	public String update(EmployeeVO employeeVO) {
		
		// 파일 로컬+DB 저장, 파일코드 얻어오고 설정
		Map<String, Object> map = this.fileController.uploadFile(employeeVO.getUploadFile(), "empProfile");
		int result = (Integer)map.get("result"); // db에 insert 성공한 개수
		String atchFileCd = (String)map.get("atchFileCd"); // 파일코드
		employeeVO.setAtchFileCd(atchFileCd);
		
		// 비밀번호 보안화 인코딩
		String rawPw = employeeVO.getEmpPw();
		BCryptPasswordEncoder encoder = new BCryptPasswordEncoder();
		String encodedPassword = encoder.encode(rawPw);
		employeeVO.setEmpPw(encodedPassword);
		log.info("update -> employeeVO : " + employeeVO);
		
		// EmployeeVO DB 수정
		int res = this.employeeService.update(employeeVO);
		log.info("update -> res : " + res);
		
		return "redirect:/emp/detail?empNo="+employeeVO.getEmpNo();
	}
	
	/**
	 * 로그인 회원 계정 상태 조회
	 * @param employeeVO
	 * @return
	 */
	@ResponseBody
	@PostMapping("/empStCheckAjax")
	public EmployeeVO empStCheckAjax(@RequestBody EmployeeVO employeeVO) {
		log.info("empStCheckAjax -> employeeVO : " + employeeVO);
		
		EmployeeVO empVO = this.employeeService.detail(employeeVO.getEmpNo());
		log.info("empStCheckAjax -> empVO : " + empVO);
		
		return empVO;
	}
	
	/**
	 * 의사 리스트 출력
	 * @param employeeVO
	 * @return
	 */
	@ResponseBody
	@GetMapping("/getDoctorList")
	public List<EmployeeVO> getDoctorList() {
		List<EmployeeVO> data= this.employeeService.getDoctorList();
		log.info("getDoctorList"+data);
		
		return data;
	}
}
