package kr.or.dduk.hrd.controller;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import kr.or.dduk.calendar.service.CalendarService;
import kr.or.dduk.common.service.CommonService;
import kr.or.dduk.employee.service.EmployeeService;
import kr.or.dduk.util.FileController;
import kr.or.dduk.vo.AuthorityVO;
import kr.or.dduk.vo.DocOfficeVO;
import kr.or.dduk.vo.DocScheduleVO;
import kr.or.dduk.vo.EmployeeVO;
import kr.or.dduk.vo.PatientVO;
import kr.or.dduk.vo.ProofApplicationVO;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@RequestMapping("/hrd")
@Controller
public class HrdController {
	
	@Autowired
	FileController fileController;
	
	@Autowired
	EmployeeService	employeeService;
	
	@Autowired
	CommonService commonService;
	
	/**
	 * 전체 사원 목록
	 * @param model
	 * @return
	 */
	@GetMapping("/empList")
	public String main(Model model) {
		
		List<EmployeeVO> empList = this.employeeService.getAllEmp();
		log.info("main -> empList : " + empList);
		
		model.addAttribute("employeeVOList", empList);
		
		return "hrd/empList";
	}
	
	/**
	 * 비동기통신 방법으로 모든 사원 목록을 가져옴
	 */
	@ResponseBody
	@GetMapping("/getEmpList")
	public List<EmployeeVO> getEmpList() {
		List<EmployeeVO> empVOList = this.employeeService.getAllEmp();
		log.info("getEmpList -> empVOList : " + empVOList);
		
		return empVOList;
	}
	
	/**
	 * 비동기통신 방법으로 승인 관련 사원 목록을 가져옴
	 */
	@ResponseBody
	@GetMapping("/getPermEmpList")
	public List<EmployeeVO> getPermEmpList() {
		List<EmployeeVO> empVOList = this.employeeService.getPermEmpList();
		log.info("getPermEmpList -> empVOList : " + empVOList);
		
		return empVOList;
	}
	
	/**
	 * 계정 조회
	 * @return
	 */
	@ResponseBody
	@PostMapping("/detail")
	public EmployeeVO detail(@RequestParam("empNo") String empNo) {
		log.info("hrd-detail -> empNo : " + empNo);
		EmployeeVO employeeVO = this.employeeService.getHrdDetail(empNo);
		log.info("hrd-detail -> employeeVO : " + employeeVO);
		
		return employeeVO;
	}
	
	/**
	 * 인사과 사원 정보 수정
	 * @param EmployeeVO
	 * @return
	 */
	@ResponseBody
	@PostMapping("/update")
	public Map<String, Object> update(@ModelAttribute EmployeeVO employeeVO) {
		
		// 파일 로컬+DB 저장, 파일코드 얻어오고 설정
		if(employeeVO.getUploadFile() != null) {
			Map<String, Object> map = this.fileController.uploadFile(employeeVO.getUploadFile(), "empProfile");
			int result = (Integer)map.get("result"); // db에 insert 성공한 개수
			log.info("result: " + result);
			log.info("map" + map);
			String atchFileCd = (String)map.get("atchFileCd"); // 파일코드
			employeeVO.setAtchFileCd(atchFileCd);
		}
		
		// 만약 비밀번호가 변경됐으면
		if(employeeVO.getEmpPw() != null) {
			// 비밀번호 보안화 인코딩
			String rawPw = employeeVO.getEmpPw();
			BCryptPasswordEncoder encoder = new BCryptPasswordEncoder();
			String encodedPassword = encoder.encode(rawPw);
			employeeVO.setEmpPw(encodedPassword);
			log.info("update -> employeeVO : " + employeeVO);
		}
		
		// EmployeeVO DB 수정
		int res = this.employeeService.update(employeeVO);
		log.info("update -> res : " + res);
		
		Map<String, Object> resMap = new HashMap<String, Object>();
		if(res > 0) { // 수정 성공
			resMap.put("result", "success");
			return resMap;
		}else { 	// 수정 실패
			return null;
		}
	}
	
	/**
	 * 진료실 배정 페이지
	 * @param model
	 * @return
	 */
	@GetMapping("/assignClinicRoom")
	public String assignClinicRoom(Model model) {
		
		// 모든 의사 프로필 가져오기
		List<EmployeeVO> doctorVOList = this.employeeService.getAllDoctorDetail();
		// 일정을 넣을 리스트
		List<DocScheduleVO> docScheduleVOList = new ArrayList<DocScheduleVO>();
		// 모든 진료실 가져오기
		List<DocOfficeVO> docOfficeVOList = this.commonService.getOfficesCondition();
		
		// 현재 시각에 진행되는 일정을 가져와서 리스트에 넣기
		for(EmployeeVO doctorVO : doctorVOList) {
			DocScheduleVO docScheduleVO = this.employeeService.getPresentSchedule(doctorVO.getEmpNo());
			docScheduleVOList.add(docScheduleVO);
		}
		
		model.addAttribute("doctorVOList", doctorVOList);
		model.addAttribute("docScheduleVOList", docScheduleVOList);
		model.addAttribute("docOfficeVOList", docOfficeVOList);
		
		return "hrd/assignClinicRoom";
	}
}
